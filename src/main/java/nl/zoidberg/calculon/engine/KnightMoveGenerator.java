/**
 * Calculon - A Java chess-engine.
 *
 * Copyright (C) 2008-2009 Barry Smith
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
package nl.zoidberg.calculon.engine;

import java.util.List;

import nl.zoidberg.calculon.engine.BitBoard.BitBoardMove;
import nl.zoidberg.calculon.model.Piece;

public class KnightMoveGenerator extends PieceMoveGenerator {
	
	// Pre-generated knight moves
	public static final long[] KNIGHT_MOVES = new long[64];
	static {
        KNIGHT_MOVES[0] = 0b00000000_00000000_00000000_00000000_00000000_00000010_00000100_00000000L;
        KNIGHT_MOVES[1] = 0b00000000_00000000_00000000_00000000_00000000_00000101_00001000_00000000L;
        KNIGHT_MOVES[2] = 0b00000000_00000000_00000000_00000000_00000000_00001010_00010001_00000000L;
        KNIGHT_MOVES[3] = 0b00000000_00000000_00000000_00000000_00000000_00010100_00100010_00000000L;
        KNIGHT_MOVES[4] = 0b00000000_00000000_00000000_00000000_00000000_00101000_01000100_00000000L;
        KNIGHT_MOVES[5] = 0b00000000_00000000_00000000_00000000_00000000_01010000_10001000_00000000L;
        KNIGHT_MOVES[6] = 0b00000000_00000000_00000000_00000000_00000000_10100000_00010000_00000000L;
        KNIGHT_MOVES[7] = 0b00000000_00000000_00000000_00000000_00000000_01000000_00100000_00000000L;
        KNIGHT_MOVES[8] = 0b00000000_00000000_00000000_00000000_00000010_00000100_00000000_00000100L;
        KNIGHT_MOVES[9] = 0b00000000_00000000_00000000_00000000_00000101_00001000_00000000_00001000L;
        KNIGHT_MOVES[10] = 0b00000000_00000000_00000000_00000000_00001010_00010001_00000000_00010001L;
        KNIGHT_MOVES[11] = 0b00000000_00000000_00000000_00000000_00010100_00100010_00000000_00100010L;
        KNIGHT_MOVES[12] = 0b00000000_00000000_00000000_00000000_00101000_01000100_00000000_01000100L;
        KNIGHT_MOVES[13] = 0b00000000_00000000_00000000_00000000_01010000_10001000_00000000_10001000L;
        KNIGHT_MOVES[14] = 0b00000000_00000000_00000000_00000000_10100000_00010000_00000000_00010000L;
        KNIGHT_MOVES[15] = 0b00000000_00000000_00000000_00000000_01000000_00100000_00000000_00100000L;
        KNIGHT_MOVES[16] = 0b00000000_00000000_00000000_00000010_00000100_00000000_00000100_00000010L;
        KNIGHT_MOVES[17] = 0b00000000_00000000_00000000_00000101_00001000_00000000_00001000_00000101L;
        KNIGHT_MOVES[18] = 0b00000000_00000000_00000000_00001010_00010001_00000000_00010001_00001010L;
        KNIGHT_MOVES[19] = 0b00000000_00000000_00000000_00010100_00100010_00000000_00100010_00010100L;
        KNIGHT_MOVES[20] = 0b00000000_00000000_00000000_00101000_01000100_00000000_01000100_00101000L;
        KNIGHT_MOVES[21] = 0b00000000_00000000_00000000_01010000_10001000_00000000_10001000_01010000L;
        KNIGHT_MOVES[22] = 0b00000000_00000000_00000000_10100000_00010000_00000000_00010000_10100000L;
        KNIGHT_MOVES[23] = 0b00000000_00000000_00000000_01000000_00100000_00000000_00100000_01000000L;
        KNIGHT_MOVES[24] = 0b00000000_00000000_00000010_00000100_00000000_00000100_00000010_00000000L;
        KNIGHT_MOVES[25] = 0b00000000_00000000_00000101_00001000_00000000_00001000_00000101_00000000L;
        KNIGHT_MOVES[26] = 0b00000000_00000000_00001010_00010001_00000000_00010001_00001010_00000000L;
        KNIGHT_MOVES[27] = 0b00000000_00000000_00010100_00100010_00000000_00100010_00010100_00000000L;
        KNIGHT_MOVES[28] = 0b00000000_00000000_00101000_01000100_00000000_01000100_00101000_00000000L;
        KNIGHT_MOVES[29] = 0b00000000_00000000_01010000_10001000_00000000_10001000_01010000_00000000L;
        KNIGHT_MOVES[30] = 0b00000000_00000000_10100000_00010000_00000000_00010000_10100000_00000000L;
        KNIGHT_MOVES[31] = 0b00000000_00000000_01000000_00100000_00000000_00100000_01000000_00000000L;
        KNIGHT_MOVES[32] = 0b00000000_00000010_00000100_00000000_00000100_00000010_00000000_00000000L;
        KNIGHT_MOVES[33] = 0b00000000_00000101_00001000_00000000_00001000_00000101_00000000_00000000L;
        KNIGHT_MOVES[34] = 0b00000000_00001010_00010001_00000000_00010001_00001010_00000000_00000000L;
        KNIGHT_MOVES[35] = 0b00000000_00010100_00100010_00000000_00100010_00010100_00000000_00000000L;
        KNIGHT_MOVES[36] = 0b00000000_00101000_01000100_00000000_01000100_00101000_00000000_00000000L;
        KNIGHT_MOVES[37] = 0b00000000_01010000_10001000_00000000_10001000_01010000_00000000_00000000L;
        KNIGHT_MOVES[38] = 0b00000000_10100000_00010000_00000000_00010000_10100000_00000000_00000000L;
        KNIGHT_MOVES[39] = 0b00000000_01000000_00100000_00000000_00100000_01000000_00000000_00000000L;
        KNIGHT_MOVES[40] = 0b00000010_00000100_00000000_00000100_00000010_00000000_00000000_00000000L;
        KNIGHT_MOVES[41] = 0b00000101_00001000_00000000_00001000_00000101_00000000_00000000_00000000L;
        KNIGHT_MOVES[42] = 0b00001010_00010001_00000000_00010001_00001010_00000000_00000000_00000000L;
        KNIGHT_MOVES[43] = 0b00010100_00100010_00000000_00100010_00010100_00000000_00000000_00000000L;
        KNIGHT_MOVES[44] = 0b00101000_01000100_00000000_01000100_00101000_00000000_00000000_00000000L;
        KNIGHT_MOVES[45] = 0b01010000_10001000_00000000_10001000_01010000_00000000_00000000_00000000L;
        KNIGHT_MOVES[46] = 0b10100000_00010000_00000000_00010000_10100000_00000000_00000000_00000000L;
        KNIGHT_MOVES[47] = 0b01000000_00100000_00000000_00100000_01000000_00000000_00000000_00000000L;
        KNIGHT_MOVES[48] = 0b00000100_00000000_00000100_00000010_00000000_00000000_00000000_00000000L;
        KNIGHT_MOVES[49] = 0b00001000_00000000_00001000_00000101_00000000_00000000_00000000_00000000L;
        KNIGHT_MOVES[50] = 0b00010001_00000000_00010001_00001010_00000000_00000000_00000000_00000000L;
        KNIGHT_MOVES[51] = 0b00100010_00000000_00100010_00010100_00000000_00000000_00000000_00000000L;
        KNIGHT_MOVES[52] = 0b01000100_00000000_01000100_00101000_00000000_00000000_00000000_00000000L;
        KNIGHT_MOVES[53] = 0b10001000_00000000_10001000_01010000_00000000_00000000_00000000_00000000L;
        KNIGHT_MOVES[54] = 0b00010000_00000000_00010000_10100000_00000000_00000000_00000000_00000000L;
        KNIGHT_MOVES[55] = 0b00100000_00000000_00100000_01000000_00000000_00000000_00000000_00000000L;
        KNIGHT_MOVES[56] = 0b00000000_00000100_00000010_00000000_00000000_00000000_00000000_00000000L;
        KNIGHT_MOVES[57] = 0b00000000_00001000_00000101_00000000_00000000_00000000_00000000_00000000L;
        KNIGHT_MOVES[58] = 0b00000000_00010001_00001010_00000000_00000000_00000000_00000000_00000000L;
        KNIGHT_MOVES[59] = 0b00000000_00100010_00010100_00000000_00000000_00000000_00000000_00000000L;
        KNIGHT_MOVES[60] = 0b00000000_01000100_00101000_00000000_00000000_00000000_00000000_00000000L;
        KNIGHT_MOVES[61] = 0b00000000_10001000_01010000_00000000_00000000_00000000_00000000_00000000L;
        KNIGHT_MOVES[62] = 0b00000000_00010000_10100000_00000000_00000000_00000000_00000000_00000000L;
        KNIGHT_MOVES[63] = 0b00000000_00100000_01000000_00000000_00000000_00000000_00000000_00000000L;
    }
	
	private void generateMoves(BitBoard bitBoard, long pieceMap, boolean alreadyInCheck, boolean safeFromCheck, List<BitBoardMove> rv) {
        byte player = bitBoard.getPlayer();
        long knightMoves = KNIGHT_MOVES[Long.numberOfTrailingZeros(pieceMap)];
        knightMoves &= ~bitBoard.getBitmapColor();

        while(knightMoves != 0) {
        	long nextMove = Long.lowestOneBit(knightMoves);
        	knightMoves ^= nextMove;
        	
        	BitBoardMove bbMove;
        	if((nextMove & bitBoard.getBitmapOppColor(player)) != 0) {
				bbMove = BitBoard.generateCapture(pieceMap, nextMove, player, Piece.KNIGHT, bitBoard.getPiece(nextMove));
        	} else {
				bbMove = BitBoard.generateMove(pieceMap, nextMove, player, Piece.KNIGHT);
        	}
        	
			if(safeFromCheck) {
                rv.add(bbMove);
			} else {
				bitBoard.makeMove(bbMove);
				if( ! CheckDetector.isPlayerJustMovedInCheck(bitBoard, ! alreadyInCheck)) {
	                rv.add(bbMove);
				}
				bitBoard.unmakeMove();
			}
        }
	}

	@Override
	public void generateMoves(BitBoard bitBoard, boolean alreadyInCheck, long potentialPins, List<BitBoardMove> rv) {
		long pieces = bitBoard.getBitmapColor() & bitBoard.getBitmapKnights();
		while(pieces != 0) {
			long nextPiece = Long.lowestOneBit(pieces);
			pieces ^= nextPiece;
			boolean safeFromCheck = ((nextPiece & potentialPins) == 0) & !alreadyInCheck;
			this.generateMoves(bitBoard, nextPiece, alreadyInCheck, safeFromCheck, rv);
		}
	}
}
