package nl.zoidberg.calculon.silverbars;

import java.math.BigDecimal;
import java.time.Instant;
import java.util.NoSuchElementException;

public class Order {

    public enum Type {
        BUY, SELL;

        public static Type fromString(String s) {
            for(Type type: values()) {
                if(type.name().equalsIgnoreCase(s)) {
                    return type;
                }
            }
            throw new NoSuchElementException(s);
        }
    }

    private static long nextOrderId = 1;

    // Make classes immutable by default.
    private final long orderId = nextOrderId++;

    private final String userId;
    private final BigDecimal orderQuantity;
    private final BigDecimal pricePerKg;
    private final Type orderType;
    private final Instant creationDatestamp = Instant.now();

    public Order(String userId, BigDecimal orderQuantity, BigDecimal pricePerKg, Type orderType) {
        this.userId = userId;
        this.orderQuantity = orderQuantity;
        this.pricePerKg = pricePerKg;
        this.orderType = orderType;
    }

    public long getOrderId() {
        return orderId;
    }

    public String getUserId() {
        return userId;
    }

    public BigDecimal getOrderQuantity() {
        return orderQuantity;
    }

    public BigDecimal getPricePerKg() {
        return pricePerKg;
    }

    public Type getOrderType() {
        return orderType;
    }

    @Override
    public String toString() {
        return "Order{" +
                "userId='" + userId + '\'' +
                ", orderQuantity=" + orderQuantity +
                ", pricePerKg=" + pricePerKg +
                ", orderType=" + orderType +
                '}';
    }
}
